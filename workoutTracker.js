// =============================
// File: workoutTracker.js (autogenerated workouts supported)
// =============================

import { logWorkout, generateSupersetTemplate } from './models/workoutLogs.js';
import { fetchTemplateById } from './models/workoutTemplates.js';
import dataManager from './dataManager.js';
import progressTracker from './progressTracker.js';

let selectedTemplateId = null;
let currentUser = 'Dad';

window.addEventListener('DOMContentLoaded', async () => {
  currentUser = await dataManager.getCurrentUser();
  const urlParams = new URLSearchParams(window.location.search);
  selectedTemplateId = urlParams.get('templateId');

  let template;
  if (selectedTemplateId) {
    template = await fetchTemplateById(selectedTemplateId);
  } else {
    template = await generateSupersetTemplate(currentUser);
  }

  if (!template) {
    return alert("Unable to load or generate a workout template.");
  }

  document.getElementById('workoutTitle').textContent = `${template.title} (v${template.version || 1})`;
  await renderWorkoutUI(template.exercises);
});

async function renderWorkoutUI(exercises) {
  const container = document.getElementById('workoutContainer');
  container.innerHTML = '';
  for (let index = 0; index < exercises.length; index++) {
    const exercise = exercises[index];
    const rec = await progressTracker.getRecommendedSet(currentUser, exercise.name);
    const div = document.createElement('div');
    div.innerHTML = `
      <h4>${exercise.name}</h4>
      <div class="recommendation">Recommended: ${rec.weight} lbs Ã— ${rec.reps} reps</div>
      <input type="number" id="weight-${index}" placeholder="Weight" value="${rec.weight}">
      <input type="number" id="reps-${index}" placeholder="Reps" value="${rec.reps}">
    `;
    container.appendChild(div);
  }
}

document.getElementById('completeWorkoutBtn')?.addEventListener('click', async () => {
  const performance = {};
  document.querySelectorAll('#workoutContainer > div').forEach((div, index) => {
    const name = div.querySelector('h4').textContent;
    const weight = parseFloat(div.querySelector(`#weight-${index}`).value) || 0;
    const reps = parseInt(div.querySelector(`#reps-${index}`).value) || 0;
    performance[name] = [{ weight, reps }];
  });

  await logWorkout({
    userId: currentUser,
    templateId: selectedTemplateId || 'adaptive-auto',
    completedAt: new Date().toISOString(),
    performance
  });

  alert('Workout logged successfully!');
});
